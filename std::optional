#include <iostream>
#include <map>
#include <string>
std::string GetValueFromMap(const std::map<int, std::string>& m, int key) {
auto itr = m.find(key);
if (itr != m.end()) {
return itr->second;
}
return std::string();
}
int main() {
std::map<int, std::string> data = {{1, "hi"}, {2, "hello"}, {3, "hiroo"}};
std::cout << "맵에서 2 에 대응되는 값은? " << GetValueFromMap(data, 2)
<< std::endl;
std::cout << "맵에서 4 에 대응되는 값은? " << GetValueFromMap(data, 4)
<< std::endl;
}
//===========================================================================
#include <iostream>
#include <map>
#include <string>
std::pair<std::string, bool> GetValueFromMap(
const std::map<int, std::string>& m, int key) {
auto itr = m.find(key);
if (itr != m.end()) {
return std::make_pair(itr->second, true);
}
return std::make_pair(std::string(), false);
}
int main() {
std::map<int, std::string> data = {{1, "hi"}, {2, "hello"}, {3, "hiroo"}};
std::cout << "맵에서 2 에 대응되는 값은? " << GetValueFromMap(data, 2).first
<< std::endl;
std::cout << "맵에 4 는 존재하나요 " << std::boolalpha
<< GetValueFromMap(data, 4).second << std::endl;
}

//===========================================================================
#include <iostream>
#include <map>
#include <string>
#include <utility>
std::optional<std::string> GetValueFromMap(const std::map<int, std::string>& m,
int key) {
auto itr = m.find(key);
if (itr != m.end()) {
return itr->second;
}
// nullopt 는 <utility> 에 정의된 객체로 비어있는 optional 을 의미한다.
return std::nullopt;
}
int main() {
std::map<int, std::string> data = {{1, "hi"}, {2, "hello"}, {3, "hiroo"}};
std::cout << "맵에서 2 에 대응되는 값은? " << GetValueFromMap(data, 2).value()
<< std::endl;
std::cout << "맵에 4 는 존재하나요 " << std::boolalpha
<< GetValueFromMap(data, 4).has_value() << std::endl;
}
//===========================================================================
#include <iostream>
#include <utility>
class A {
public:
A() { std::cout << "디폴트 생성" << std::endl; }
A(const A& a) { std::cout << "복사 생성" << std::endl; }
};
int main() {
A a;
std::cout << "Optional 객체 만듦 ---- " << std::endl;
std::optional<A> maybe_a;
std::cout << "maybe_a 는 A 객체를 포함하고 있지 않기 때문에 디폴트 생성할 "
"필요가 없다."
<< std::endl;
maybe_a = a;
}
//===========================================================================
#include <functional>
#include <iostream>
#include <optional>
#include <utility>
class A {
public:


int data;
};
int main() {
A a;
a.data = 5;
// maybe_a 는 a 의 복사복이 아닌 a 객체 자체의 레퍼런스를 보관하게 된다.
std::optional<std::reference_wrapper<A>> maybe_a = std::ref(a);
maybe_a->get().data = 3;
// 실제로 a 객체의 data 가 바뀐 것을 알 수 있다.
std::cout << "a.data : " << a.data << std::endl;
}
//===========================================================================
#include <iostream>
#include <memory>
#include <variant>
class A {
public:
void a() { std::cout << "I am A" << std::endl; }
};
class B {
public:
void b() { std::cout << "I am B" << std::endl; }
};
std::variant<A, B> GetDataFromDB(bool is_a) {
if (is_a) {
  
return A();
}
return B();
}


int main() {
auto v = GetDataFromDB(true);
std::cout << v.index() << std::endl;
std::get<A>(v).a(); // 혹은 std::get<0>(v).a()
}
//===========================================================================
#include <iostream>
#include <string>
#include <tuple>
int main() {
std::tuple<int, double, std::string> tp;
tp = std::make_tuple(1, 3.14, "hi");
std::cout << std::get<0>(tp) << ", " << std::get<1>(tp) << ", "
<< std::get<2>(tp) << std::endl;
}
//===========================================================================
#include <iostream>
#include <string>
#include<tuple>



std::tuple<int, std::string, bool> GetStudent(int id) {
  if(id == 0){
    return std::make_tuple(30, "철수 " , true);
    
  }else{
    return std::make_tuple(28, "영희",false);
  }
}









int main(){

  auto student = GetStudent(0);

  int age = std::get<0>(student);
  std::string name = std::get<1> (student);
  bool is_male =std::get<2>(student);


  std::cout << "이름: " << name << std::endl;
  std::cout << "나이: " << age << std::endl;
  std::cout << "남자 ? " << std::boolalpha << is_male << std::endl;
}
//===========================================================================
#include <iostream>
#include <string>
#include <tuple>
std::tuple<int, std::string, bool> GetStudent(int id) {
if (id == 0) {
return std::make_tuple(30, "철수", true);
} else {
return std::make_tuple(28, "영희", false);
}
}
다양한 C++ 표준 라이브러리 소개 953
int main() {
auto student = GetStudent(1);
auto [age, name, is_male] = student;
std::cout << "이름 : " << name << std::endl;
std::cout << "나이 : " << age << std::endl;
std::cout << "남자 ? " << std::boolalpha << is_male << std::endl;
}
//===========================================================================
#include <iostream>
#include <map>
#include <string>
int main() {
std::map<int, std::string> m = {{3, "hi"}, {5, "hello"}};
for (auto& [key, val] : m) {
std::cout << "Key : " << key << " value : " << val << std::endl;
}
}

//===========================================================================

//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================

//===========================================================================

//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================

//===========================================================================
//===========================================================================
//===========================================================================
//===========================================================================
